{"version":3,"sources":["app/models/pagination.ts","app/api/Agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmedEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateError","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","city","ActivityFormValues","undefined","title","date","description","category","venue","Profile","userName","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPredicate","value","resetPredicate","forEach","setPagingParams","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","setLoading","createActivity","attendee","newActivity","updateActivity","acitivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","openState","bodyContent","openModal","content","setState","SetContent","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","useHistory","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFount","Inline","message","Modal","centered","open","onClose","onOpen","dimmer","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setCropper","imagePreview","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.f22733f5.chunk.js","sourcesContent":["export interface Pagination{\r\n    currentPage:number;\r\n    itemsPerPage:number;\r\n    totalItems:number;\r\n    totalPages:number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data:T;\r\n    pagination:Pagination;\r\n\r\n    constructor(data:T,pagination:Pagination) {\r\n            this.data = data;\r\n            this.pagination = pagination;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber = 1;\r\n    pageSize = 2;\r\n\r\n    constructor(pageNumber=1,pageSize=2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosResponse } from \"axios\";\r\nimport { stat } from \"fs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n//purposefull delay to introduce load\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n//console.log(process.env.REACT_APP_SECRET_CODE);\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development')\r\n        await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n\r\n}, (error) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    //console.log(error.response);\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found')\r\n            }\r\n            if (data.errors) {\r\n                const modelStateError = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modelStateError.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelStateError.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accesstoken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) =>\r\n        requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) =>\r\n        requests.get(`/account/resendEmailConfirmationLink?email=${email}`)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isCancelled?: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this.city, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    date: Date | null = null;\r\n    description: string = '';\r\n    category: string = '';\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.date = activity.date;\r\n            this.description = activity.description;\r\n            this.category = activity.category;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n\r\n        }\r\n\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[]\r\n}\r\n\r\nexport class Profile implements Profile {\r\n\r\n    constructor(user: User) {\r\n        this.username = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\n\r\nimport agent from \"../api/Agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n      \r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams(); //note do not import any libs import your interface\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    //actions\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity\r\n            return activity;\r\n        } else {\r\n            this.setLoadingInitial(true);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(//so some itterates over the list and determines your condition is true\r\n                a => a.username === user.userName\r\n            )\r\n            activity.isHost = activity.hostUsername === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    setLoading = (state: boolean) => {\r\n        this.loading = state;\r\n    }\r\n\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (acitivity: ActivityFormValues) => {\r\n\r\n\r\n        try {\r\n            await agent.Activities.update(acitivity);\r\n            runInAction(() => {\r\n                if (acitivity.id) {\r\n                    let updateActivity = { ...this.getActivity(acitivity.id), ...acitivity }\r\n                    this.activityRegistry.set(acitivity.id, updateActivity as Activity);\r\n                    this.selectedActivity = updateActivity as Activity;\r\n                }\r\n\r\n\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                if (this.selectedActivity?.id === id)\r\n                    this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee)\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoading(false);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/Agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || this.activeTab === 4) {\r\n                    const predicate = this.activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url)\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.uploading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id)\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false; //this line sets the current main to false\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id)\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id); //this filter removes the photo being deleted from the collection\r\n                    this.loading = false;\r\n                }\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.userName && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate)\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loadingFollowings = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/Agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            //close modal\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/')\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, { scope: 'public_profile,email' })\r\n        }\r\n\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n//this will cause the token to be refreshed every 30 sec\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore:CommentStore;\r\n}\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\n//make this context availible in react app world\r\n//store contains the activity store which contains our observables\r\nexport const StoreContext = createContext(store); //from react\r\n\r\n//react hook to use the store in the components\r\n//hook contains the store context\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        //reactions it only runs when there is a change to the value of token\r\n        reaction(\r\n            ()=>this.token,\r\n             token =>{\r\n                 if(token){\r\n                     window.localStorage.setItem('jwt',token);\r\n                 }else{\r\n                    window.localStorage.removeItem('jwt');\r\n                 }\r\n             }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\n\r\n\r\nexport default class ModalStore {\r\n    openState = false;\r\n    bodyContent: JSX.Element | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (state: boolean, content: JSX.Element | null) => {\r\n        this.openState = state;\r\n        this.bodyContent = content;\r\n    }\r\n\r\n    setState = (state: boolean) => {\r\n        this.openState = state;\r\n    }\r\n\r\n    SetContent = (content: JSX.Element) => {\r\n        this.bodyContent = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.openState = false;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n   \r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            //Connect\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the connection: \", error));\r\n            //recieve\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment=>{\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n            //send\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);                 \r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection\", error))\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore } = useStore();\r\n    const { user, logout, isLoggedIn } = userStore;\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 15 }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                {isLoggedIn &&\r\n                <>\r\n                    <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                    <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                    <Menu.Item >\r\n                        <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                    </Menu.Item>\r\n                    <Menu.Item position='right'>\r\n                        <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                        <Dropdown pointing='top left' text={user?.displayName}>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text=\"My Profile\" icon='user' />\r\n                                <Dropdown.Item onClick={logout} text=\"Logout\" icon='power' />\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </Menu.Item>\r\n                </>}\r\n\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer( function ActivityFilters() {\r\n    const {activityStore:{predicate,setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%',marginTop:25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                content='All Activities' \r\n                active={predicate.has('all')}\r\n                onClick = {()=>setPredicate('all','true')}\r\n                />\r\n                <Menu.Item content=\"I'm going\"\r\n                 active={predicate.has('isGoing')}\r\n                 onClick = {()=>setPredicate('isGoing','true')}\r\n                />\r\n                <Menu.Item content=\"I'm hosting\" \r\n                 active={predicate.has('isHost')}\r\n                 onClick = {()=>setPredicate('isHost','true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n            onChange={(date: Date) =>setPredicate('startDate',date as Date)}\r\n            value ={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile:Profile;\r\n}\r\n\r\nexport default observer( function FollowButton({profile}:Props){\r\n    const {profileStore,userStore}=useStore();\r\n    const {updateFollowing,loading}=profileStore;\r\n    if(userStore.user?.userName === profile.username)return null; //do not display button\r\n\r\n    //prevent default action \r\n    function handleFollow(e:SyntheticEvent,username:string){\r\n        e.preventDefault();\r\n        profile.following?updateFollowing(username,false):updateFollowing(username,true);\r\n    }\r\n    return(\r\n        <Reveal animated='move'>\r\n        <Reveal.Content visible style={{ width: '100%' }}>\r\n            <Button\r\n                fluid\r\n                color='teal'\r\n                content={profile.following?'Following':'Not Following'} />\r\n        </Reveal.Content>\r\n        <Reveal.Content hidden style={{ width: '100%' }}>\r\n            <Button\r\n                fluid\r\n                basic\r\n                color={profile.following ? 'red' : 'green'}\r\n                content={profile.following ? 'Unfollow' : 'Follow'} \r\n                loading={loading}\r\n                onClick={(e)=>handleFollow(e,profile.username)}\r\n                />\r\n        </Reveal.Content>\r\n    </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\ninterface Props {\r\n    profile: Profile\r\n}\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n        return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n        }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} Followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles ={\r\n        borderColor:'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style = {attendee.following?styles:null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile = {attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                <Label attached='top' color='red' content='Cancelled' style={{textAlign:'center'}}\r\n                />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style ={{marginBottom:3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                            Hosted by  <Link to={`/Profiles/${activity.host?.username}`}>{activity.host?.displayName} </Link>  \r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing &&  !activity.isHost &&(\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    floated='right'\r\n                    content='View'\r\n                    color='teal' />\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem activity={activity} key={activity.id} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\n\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const {  loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    type?:string,\r\n    label?: string;\r\n    value?:string;\r\n}\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        \r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({error: error.response.data}))}\r\n        >\r\n            {({ handleSubmit, isSubmitting,errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email'  />\r\n                    <MyTextInput name='password' placeholder='Password' type='password'  />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={()=>(\r\n                            <Label style={{marginBottom:10}} basic color='red' content={errors.error}\r\n                             />\r\n                        )}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                    \r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\ninterface Props {\r\n    errors: any;\r\n}\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any,i:any) => (//use i as index when no real key in maps\r\n                        <Message.Item key={i}>\r\n                                {err}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        \r\n        <Formik\r\n            initialValues={{displayName: '',username:'', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n                })}\r\n        >\r\n            {({ handleSubmit, isSubmitting,errors,isValid,dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={()=>(\r\n                            <ValidationErrors errors={errors.error}  />\r\n                        )}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                    loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                    \r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Divider, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivites\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted >\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(true, <LoginForm />)} size='huge' inverted >\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(true, <RegisterForm />)} size='huge' inverted >\r\n                            Register\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button\r\n                            loading={userStore.fbLoading}\r\n                            onClick={userStore.facebookLogin}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                        />\r\n                    </>\r\n                )}\r\n\r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n  inverted?:boolean;\r\n  content?:string;\r\n\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true,content='Loading...'}:Props){\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    rows:number,\r\n    label?: string;\r\n}\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    options: any\r\n    label?: string;\r\n}\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]\r\n\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker,{ReactDatePickerProps} from \"react-datepicker\";\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value=>helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nexport default observer(function ActivityForm() {\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        category: Yup.string().required('The activity category is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        date: Yup.string().required('The activity date is required').nullable(),\r\n        city: Yup.string().required('The activity city is required'),\r\n        venue: Yup.string().required('The activity venue is required')\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => {\r\n                history.push(`/activities/${newActivity.id}`)\r\n            })\r\n        } else {\r\n            updateActivity(activity).then(() => {\r\n                history.push(`/activities/${activity.id}`)\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content=\"Loading activity...\" />\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:m aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive\r\n                            type='submit'\r\n                            content='Submit'\r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            // in this example of signal r we use the activity to group all connections chats to a specific area\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => { commentStore.clearComments(); }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comments (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {//this caters for the new line in text area\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n\r\n                        <Button as={Link}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'\r\n                            disabled={activity.isCancelled}\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading}\r\n                        disabled={activity.isCancelled}\r\n                        onClick={updateAttendance}\r\n                        color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","\r\nimport { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport {  Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer( function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity,loadActivity,loadingInitial,clearSelectedActivity } = activityStore;\r\n    const {id} = useParams<{id:string}>();\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id);\r\n        return ()=>clearSelectedActivity();\r\n    },[id,loadActivity,clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n    return (\r\n<Grid>\r\n    <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity}/>\r\n        <ActivityDetailedChat activityId={activity.id} />\r\n    </Grid.Column>\r\n    <Grid.Column width={6}>\r\n        <ActivityDetailedSidebar activity={activity} />\r\n    </Grid.Column>\r\n</Grid>\r\n\r\n\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors,setErrors] = useState(null);\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + '/buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + '/buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + '/buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + '/buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + '/activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + '/activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&(\r\n                <ValidationErrors errors= {errors} />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFount() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {\r\n                commonStore.error?.details && (\r\n                    <Segment>\r\n                        <Header as='h4' color='teal' content='Stack Trace' />\r\n                        <code style={{ marginTop: '10px' }}>{commonStore.error?.details} </code>\r\n                    </Segment>\r\n                )\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {  Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\n// interface Props {\r\n//     buttonContent: string,\r\n//     headerContent:string,\r\n//     body: JSX.Element | null;{ buttonContent,headerContent, body }: Props\r\n// }\r\n\r\nexport default observer(function ModalContainer() {\r\n\r\n    const { modalStore } = useStore();\r\n    const { openState, bodyContent, setState } = modalStore;\r\n    return (\r\n        <Modal\r\n            centered={false}\r\n            open={openState}\r\n            onClose={() => setState(false)}\r\n            onOpen={() => setState(true)}\r\n            dimmer='blurring'\r\n            size='mini'>\r\n\r\n            <Modal.Content>\r\n                {bodyContent}\r\n            </Modal.Content>\r\n\r\n        </Modal>\r\n    )\r\n})","import React from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React  from \"react\";\r\nimport { Tab, Grid, Header,  Card } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\n\r\n\r\nexport default observer( function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n    const {profile,followings,loadingFollowings,activeTab}= profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n        <Grid>\r\n            <Grid.Column width='16'>\r\n                <Header \r\n                floated='left' \r\n                icon='user' \r\n                content={activeTab===3? `People following ${profile?.displayName}`: `People ${profile?.displayName} is following`} />\r\n            </Grid.Column>\r\n            <Grid.Column width='16'>\r\n               <Card.Group itemsPerRow={4}>\r\n                   {followings.map(profile=>(\r\n                       <ProfileCard key={profile.username} profile={profile} />\r\n                   ))}\r\n               </Card.Group>\r\n            </Grid.Column>\r\n        </Grid>\r\n    </Tab.Pane>\r\n    )\r\n})","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n    const dzActive = {\r\n        borderColor: 'green',\r\n    }\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        //console.log(acceptedFiles);\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge'/>\r\n        <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\n    setCropper: (cropper:Cropper)=>void;\r\n    imagePreview: string;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({setCropper,imagePreview}:Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio = {1}\r\n            aspectRatio= {1}\r\n            preview ='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n           onInitialized = {cropper =>setCropper(cropper)}\r\n        />\r\n\r\n\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropZone\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props {\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ uploadPhoto, loading }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n    //clears the in cache memory object of the image in the browsers cache\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => {\r\n                URL.revokeObjectURL(file.preview)\r\n            });\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2} >\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\ninterface Props {\r\n    profile: Profile\r\n}\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading,\r\n        loading, setMainPhoto,deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url || '/assets/user.png'} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main'+ photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    // content='Main'\r\n                                                     name={photo.id}\r\n                                                     disabled={photo.isMain}\r\n                                                     loading={target === photo.id && loading}\r\n                                                     onClick={e => handleDeletePhoto(photo, e)}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        </Button.Group>\r\n\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\n\r\ninterface Props{\r\n    profile:Profile\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}:Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        { menuItem: 'About', render: () =>  <ProfileAbout />},\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e,data)=> profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {  Divider, Grid, Header, Item,  Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\ninterface Props{\r\n    profile:Profile\r\n}\r\nexport default observer( function ProfileHeader({profile}:Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                  <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadProfile, loadingProfile, profile,setActiveTab } = profileStore;\r\n    // this always executes when this loads\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () =>{\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username,setActiveTab])\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props)=>isLoggedIn?<Component{...props}/>:<Redirect to='/'/>}//if not logged in return to the home page\r\n        />\r\n    )\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/Agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check'/>\r\n                Successfully registered!\r\n            </Header>\r\n            <p>Please check your email (including junk email) for the verification email</p>\r\n            {email &&\r\n                <>\r\n                    <p>Didn't receive the email?  Click the below button to resend</p>\r\n                    <Button primary onClick={handleConfirmEmailResend} \r\n                        content='Resend email' size='huge' />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/Agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from './LoginForm';\r\n\r\nexport default function ConfirmEmail() {\r\n    const {modalStore} = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success)\r\n        }).catch(() => {\r\n            setStatus(Status.Failed)\r\n        })\r\n    }, [Status.Failed, Status.Success, token, email])\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>;\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed.  You can try resending the verify link to your email</p>\r\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend email' />\r\n                    </div>\r\n                );\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified - you can now login</p>\r\n                         <Button primary onClick={() => modalStore.openModal(true,<LoginForm />)} size='huge' content='Login'  /> \r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport NotFount from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\r\nimport ConfirmEmail from '../../features/users/ConfirmedEmail';\r\n\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const { commonStore, userStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\r\n    } else {\r\n      userStore.getFacebookLoginStatus().then(()=>commonStore.setAppLoaded());\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n     <ModalContainer />\r\n     <ToastContainer position='bottom-right' />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n           \r\n           \r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n           \r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute exact path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute exact path='/errors' component={TestErrors} />\r\n                <Route exact path='/server-error' component={ServerError} />\r\n                <Route exact path='/account/registerSuccess' component={RegisterSuccess} />\r\n                <Route exact path='/account/verifyEmail' component={ConfirmEmail} />\r\n                <Route component={NotFount} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n//note to make this to non react code you can call it to make history avaible for axios agent\nexport const history = createBrowserHistory();// can reuse anywhere in the app\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}