{"version":3,"sources":["app/models/pagination.ts","app/api/Agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateError","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","city","ActivityFormValues","undefined","title","date","description","category","venue","Profile","userName","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPredicate","value","resetPredicate","forEach","setPagingParams","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","setLoading","createActivity","attendee","newActivity","updateActivity","acitivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","openState","bodyContent","openModal","content","setState","SetContent","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","useHistory","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFount","Inline","message","Modal","centered","open","onClose","onOpen","dimmer","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setCropper","imagePreview","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.d1d548c5.chunk.js","sourcesContent":["export interface Pagination{\r\n    currentPage:number;\r\n    itemsPerPage:number;\r\n    totalItems:number;\r\n    totalPages:number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data:T;\r\n    pagination:Pagination;\r\n\r\n    constructor(data:T,pagination:Pagination) {\r\n            this.data = data;\r\n            this.pagination = pagination;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber = 1;\r\n    pageSize = 2;\r\n\r\n    constructor(pageNumber=1,pageSize=2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n//purposefull delay to introduce load\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n//console.log(process.env.REACT_APP_SECRET_CODE);\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development')\r\n        await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n\r\n}, (error) => {\r\n    const { data, status, config } = error.response!;\r\n    //console.log(error.response);\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found')\r\n            }\r\n            if (data.errors) {\r\n                const modelStateError = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modelStateError.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelStateError.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken:string) => requests.post<User>(`/account/fbLogin?accesstoken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isCancelled?: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this.city, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    date: Date | null = null;\r\n    description: string = '';\r\n    category: string = '';\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.date = activity.date;\r\n            this.description = activity.description;\r\n            this.category = activity.category;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n\r\n        }\r\n\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[]\r\n}\r\n\r\nexport class Profile implements Profile {\r\n\r\n    constructor(user: User) {\r\n        this.username = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\n\r\nimport agent from \"../api/Agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n      \r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams(); //note do not import any libs import your interface\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    //actions\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity\r\n            return activity;\r\n        } else {\r\n            this.setLoadingInitial(true);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(//so some itterates over the list and determines your condition is true\r\n                a => a.username === user.userName\r\n            )\r\n            activity.isHost = activity.hostUsername === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    setLoading = (state: boolean) => {\r\n        this.loading = state;\r\n    }\r\n\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (acitivity: ActivityFormValues) => {\r\n\r\n\r\n        try {\r\n            await agent.Activities.update(acitivity);\r\n            runInAction(() => {\r\n                if (acitivity.id) {\r\n                    let updateActivity = { ...this.getActivity(acitivity.id), ...acitivity }\r\n                    this.activityRegistry.set(acitivity.id, updateActivity as Activity);\r\n                    this.selectedActivity = updateActivity as Activity;\r\n                }\r\n\r\n\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                if (this.selectedActivity?.id === id)\r\n                    this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee)\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoading(false);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/Agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || this.activeTab === 4) {\r\n                    const predicate = this.activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url)\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.uploading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id)\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false; //this line sets the current main to false\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id)\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id); //this filter removes the photo being deleted from the collection\r\n                    this.loading = false;\r\n                }\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.userName && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate)\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loadingFollowings = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/Agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            //close modal\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/')\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            //close modal\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image:string) =>\r\n    {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n       }\r\n       \r\n       getFacebookLoginStatus = async () =>{\r\n           window.FB.getLoginStatus(response =>{\r\n               if(response.status === 'connected'){\r\n                   this.fbAccessToken = response.authResponse.accessToken;\r\n               }\r\n           })\r\n       }\r\n\r\n       facebookLogin = () =>{\r\n           this.fbLoading = true;\r\n           const apiLogin  = (accessToken:string) =>{\r\n               agent.Account.fbLogin(accessToken).then(user=>{\r\n                   store.commonStore.setToken(user.token);\r\n                   runInAction(()=>{\r\n                       this.user = user;\r\n                       this.fbLoading = false;\r\n                   })\r\n                history.push('/activities');\r\n               }).catch(error=>{\r\n                   console.log(error);\r\n                   runInAction(()=>this.fbLoading = false);\r\n               })\r\n           }\r\n           if(this.fbAccessToken){\r\n               apiLogin(this.fbAccessToken);\r\n           }else{\r\n               window.FB.login(response=>{\r\n                   apiLogin(response.authResponse.accessToken);\r\n               },{scope:'public_profile,email'})\r\n           }\r\n\r\n       }\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore:CommentStore;\r\n}\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\n//make this context availible in react app world\r\n//store contains the activity store which contains our observables\r\nexport const StoreContext = createContext(store); //from react\r\n\r\n//react hook to use the store in the components\r\n//hook contains the store context\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        //reactions it only runs when there is a change to the value of token\r\n        reaction(\r\n            ()=>this.token,\r\n             token =>{\r\n                 if(token){\r\n                     window.localStorage.setItem('jwt',token);\r\n                 }else{\r\n                    window.localStorage.removeItem('jwt');\r\n                 }\r\n             }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\n\r\n\r\nexport default class ModalStore {\r\n    openState = false;\r\n    bodyContent: JSX.Element | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (state: boolean, content: JSX.Element | null) => {\r\n        this.openState = state;\r\n        this.bodyContent = content;\r\n    }\r\n\r\n    setState = (state: boolean) => {\r\n        this.openState = state;\r\n    }\r\n\r\n    SetContent = (content: JSX.Element) => {\r\n        this.bodyContent = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.openState = false;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n   \r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            //Connect\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the connection: \", error));\r\n            //recieve\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment=>{\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n            //send\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);                 \r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection\", error))\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore } = useStore();\r\n    const { user, logout } = userStore;\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 15 }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item >\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text=\"My Profile\" icon='user' />\r\n                            <Dropdown.Item onClick={logout} text=\"Logout\" icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer( function ActivityFilters() {\r\n    const {activityStore:{predicate,setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%',marginTop:25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                content='All Activities' \r\n                active={predicate.has('all')}\r\n                onClick = {()=>setPredicate('all','true')}\r\n                />\r\n                <Menu.Item content=\"I'm going\"\r\n                 active={predicate.has('isGoing')}\r\n                 onClick = {()=>setPredicate('isGoing','true')}\r\n                />\r\n                <Menu.Item content=\"I'm hosting\" \r\n                 active={predicate.has('isHost')}\r\n                 onClick = {()=>setPredicate('isHost','true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n            onChange={(date: Date) =>setPredicate('startDate',date as Date)}\r\n            value ={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile:Profile;\r\n}\r\n\r\nexport default observer( function FollowButton({profile}:Props){\r\n    const {profileStore,userStore}=useStore();\r\n    const {updateFollowing,loading}=profileStore;\r\n    if(userStore.user?.userName === profile.username)return null; //do not display button\r\n\r\n    //prevent default action \r\n    function handleFollow(e:SyntheticEvent,username:string){\r\n        e.preventDefault();\r\n        profile.following?updateFollowing(username,false):updateFollowing(username,true);\r\n    }\r\n    return(\r\n        <Reveal animated='move'>\r\n        <Reveal.Content visible style={{ width: '100%' }}>\r\n            <Button\r\n                fluid\r\n                color='teal'\r\n                content={profile.following?'Following':'Not Following'} />\r\n        </Reveal.Content>\r\n        <Reveal.Content hidden style={{ width: '100%' }}>\r\n            <Button\r\n                fluid\r\n                basic\r\n                color={profile.following ? 'red' : 'green'}\r\n                content={profile.following ? 'Unfollow' : 'Follow'} \r\n                loading={loading}\r\n                onClick={(e)=>handleFollow(e,profile.username)}\r\n                />\r\n        </Reveal.Content>\r\n    </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\ninterface Props {\r\n    profile: Profile\r\n}\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n        return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n        }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} Followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles ={\r\n        borderColor:'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style = {attendee.following?styles:null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile = {attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                <Label attached='top' color='red' content='Cancelled' style={{textAlign:'center'}}\r\n                />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style ={{marginBottom:3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                            Hosted by  <Link to={`/Profiles/${activity.host?.username}`}>{activity.host?.displayName} </Link>  \r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing &&  !activity.isHost &&(\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    floated='right'\r\n                    content='View'\r\n                    color='teal' />\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem activity={activity} key={activity.id} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\n\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const {  loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    type?:string,\r\n    label?: string;\r\n    value?:string;\r\n}\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        \r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting,errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email'  />\r\n                    <MyTextInput name='password' placeholder='Password' type='password'  />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={()=>(\r\n                            <Label style={{marginBottom:10}} basic color='red' content={errors.error}\r\n                             />\r\n                        )}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                    \r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\ninterface Props {\r\n    errors: any;\r\n}\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any,i:any) => (//use i as index when no real key in maps\r\n                        <Message.Item key={i}>\r\n                                {err}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        \r\n        <Formik\r\n            initialValues={{displayName: '',username:'', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n                })}\r\n        >\r\n            {({ handleSubmit, isSubmitting,errors,isValid,dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={()=>(\r\n                            <ValidationErrors errors={errors.error}  />\r\n                        )}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                    loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                    \r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Divider, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivites\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted >\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(true, <LoginForm />)} size='huge' inverted >\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(true, <RegisterForm />)} size='huge' inverted >\r\n                            Register\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button\r\n                            loading={userStore.fbLoading}\r\n                            onClick={userStore.facebookLogin}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                        />\r\n                    </>\r\n                )}\r\n\r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n  inverted?:boolean;\r\n  content?:string;\r\n\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true,content='Loading...'}:Props){\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    rows:number,\r\n    label?: string;\r\n}\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    options: any\r\n    label?: string;\r\n}\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]\r\n\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker,{ReactDatePickerProps} from \"react-datepicker\";\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value=>helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nexport default observer(function ActivityForm() {\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        category: Yup.string().required('The activity category is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        date: Yup.string().required('The activity date is required').nullable(),\r\n        city: Yup.string().required('The activity city is required'),\r\n        venue: Yup.string().required('The activity venue is required')\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => {\r\n                history.push(`/activities/${newActivity.id}`)\r\n            })\r\n        } else {\r\n            updateActivity(activity).then(() => {\r\n                history.push(`/activities/${activity.id}`)\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content=\"Loading activity...\" />\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:m aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive\r\n                            type='submit'\r\n                            content='Submit'\r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            // in this example of signal r we use the activity to group all connections chats to a specific area\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => { commentStore.clearComments(); }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comments (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {//this caters for the new line in text area\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n\r\n                        <Button as={Link}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'\r\n                            disabled={activity.isCancelled}\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading}\r\n                        disabled={activity.isCancelled}\r\n                        onClick={updateAttendance}\r\n                        color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","\r\nimport { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport {  Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer( function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity,loadActivity,loadingInitial,clearSelectedActivity } = activityStore;\r\n    const {id} = useParams<{id:string}>();\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id);\r\n        return ()=>clearSelectedActivity();\r\n    },[id,loadActivity,clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n    return (\r\n<Grid>\r\n    <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity}/>\r\n        <ActivityDetailedChat activityId={activity.id} />\r\n    </Grid.Column>\r\n    <Grid.Column width={6}>\r\n        <ActivityDetailedSidebar activity={activity} />\r\n    </Grid.Column>\r\n</Grid>\r\n\r\n\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors,setErrors] = useState(null);\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + '/buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + '/buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + '/buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + '/buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + '/activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + '/activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&(\r\n                <ValidationErrors errors= {errors} />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFount() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {\r\n                commonStore.error?.details && (\r\n                    <Segment>\r\n                        <Header as='h4' color='teal' content='Stack Trace' />\r\n                        <code style={{ marginTop: '10px' }}>{commonStore.error?.details} </code>\r\n                    </Segment>\r\n                )\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {  Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\n// interface Props {\r\n//     buttonContent: string,\r\n//     headerContent:string,\r\n//     body: JSX.Element | null;{ buttonContent,headerContent, body }: Props\r\n// }\r\n\r\nexport default observer(function ModalContainer() {\r\n\r\n    const { modalStore } = useStore();\r\n    const { openState, bodyContent, setState } = modalStore;\r\n    return (\r\n        <Modal\r\n            centered={false}\r\n            open={openState}\r\n            onClose={() => setState(false)}\r\n            onOpen={() => setState(true)}\r\n            dimmer='blurring'\r\n            size='mini'>\r\n\r\n            <Modal.Content>\r\n                {bodyContent}\r\n            </Modal.Content>\r\n\r\n        </Modal>\r\n    )\r\n})","import React from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React  from \"react\";\r\nimport { Tab, Grid, Header,  Card } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\n\r\n\r\nexport default observer( function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n    const {profile,followings,loadingFollowings,activeTab}= profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n        <Grid>\r\n            <Grid.Column width='16'>\r\n                <Header \r\n                floated='left' \r\n                icon='user' \r\n                content={activeTab===3? `People following ${profile?.displayName}`: `People ${profile?.displayName} is following`} />\r\n            </Grid.Column>\r\n            <Grid.Column width='16'>\r\n               <Card.Group itemsPerRow={4}>\r\n                   {followings.map(profile=>(\r\n                       <ProfileCard key={profile.username} profile={profile} />\r\n                   ))}\r\n               </Card.Group>\r\n            </Grid.Column>\r\n        </Grid>\r\n    </Tab.Pane>\r\n    )\r\n})","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n    const dzActive = {\r\n        borderColor: 'green',\r\n    }\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        //console.log(acceptedFiles);\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge'/>\r\n        <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\n    setCropper: (cropper:Cropper)=>void;\r\n    imagePreview: string;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({setCropper,imagePreview}:Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio = {1}\r\n            aspectRatio= {1}\r\n            preview ='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n           onInitialized = {cropper =>setCropper(cropper)}\r\n        />\r\n\r\n\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropZone\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props {\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ uploadPhoto, loading }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n    //clears the in cache memory object of the image in the browsers cache\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => {\r\n                URL.revokeObjectURL(file.preview)\r\n            });\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2} >\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\ninterface Props {\r\n    profile: Profile\r\n}\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading,\r\n        loading, setMainPhoto,deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url || '/assets/user.png'} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main'+ photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    // content='Main'\r\n                                                     name={photo.id}\r\n                                                     disabled={photo.isMain}\r\n                                                     loading={target === photo.id && loading}\r\n                                                     onClick={e => handleDeletePhoto(photo, e)}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        </Button.Group>\r\n\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\n\r\ninterface Props{\r\n    profile:Profile\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}:Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        { menuItem: 'About', render: () =>  <ProfileAbout />},\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e,data)=> profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {  Divider, Grid, Header, Item,  Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\ninterface Props{\r\n    profile:Profile\r\n}\r\nexport default observer( function ProfileHeader({profile}:Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                  <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadProfile, loadingProfile, profile,setActiveTab } = profileStore;\r\n    // this always executes when this loads\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () =>{\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username,setActiveTab])\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props)=>isLoggedIn?<Component{...props}/>:<Redirect to='/'/>}//if not logged in return to the home page\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport NotFount from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { ToastContainer } from 'react-toastify';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      userStore.getFacebookLoginStatus().then(()=>commonStore.setAppLoaded());\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n     <ModalContainer />\n     <ToastContainer position='bottom-right' />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n           \n           \n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n           \n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute exact path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute exact path='/errors' component={TestErrors} />\n                <Route exact path='/server-error' component={ServerError} />\n                <Route component={NotFount} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n//note to make this to non react code you can call it to make history avaible for axios agent\nexport const history = createBrowserHistory();// can reuse anywhere in the app\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}